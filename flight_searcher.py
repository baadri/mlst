# flight_searcher.py
import asyncio
import re
import time
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException, ElementClickInterceptedException
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from city_codes import CITY_TO_IATA

# —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª–∞—Å—Å–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
CLASS_MAP = {
    "—ç–∫–æ–Ω–æ–º": "economy",
    "–∫–æ–º—Ñ–æ—Ä—Ç": "comfort",
    "–±–∏–∑–Ω–µ—Å": "business"
}

async def create_browser():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞
    
    Returns:
        tuple: (driver, wait) - —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver –∏ WebDriverWait
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
    chromedriver_path = 'chromedriver.exe' if os.name == 'nt' else './chromedriver'
    service = Service(chromedriver_path)
    options = webdriver.ChromeOptions()
    driver = webdriver.Chrome(service=service, options=options)
    driver.maximize_window()
    wait = WebDriverWait(driver, 15)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 15 —Å–µ–∫—É–Ω–¥
    return driver, wait

async def search_flights(
    from_city, 
    to_city, 
    depart_date, 
    return_date=None,  # –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    adults_count=1,
    children_count=0,
    class_type="economy", 
    flight_filter="all",
    status_callback=None,
    driver=None,
    wait=None
):
    """
    –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Selenium.
    
    Args:
        from_city (str): –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        to_city (str): –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è
        depart_date (str): –¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥
        return_date (str, optional): –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        adults_count (int, optional): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ (–æ—Ç 1 –¥–æ 6)
        children_count (int, optional): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π (–æ—Ç 0 –¥–æ 4)
        class_type (str, optional): –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—ç–∫–æ–Ω–æ–º, –∫–æ–º—Ñ–æ—Ä—Ç, –±–∏–∑–Ω–µ—Å)
        flight_filter (str, optional): —Ñ–∏–ª—å—Ç—Ä —Ç–∏–ø–∞ —Ä–µ–π—Å–∞ ('all', 'direct', 'connections')
        status_callback (callable, optional): —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        driver (WebDriver, optional): —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        wait (WebDriverWait, optional): —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriverWait –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
    Returns:
        tuple: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, —Ñ–ª–∞–≥ –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä)
    """
    # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —Å–æ–∑–¥–∞–ª–∏ –ª–∏ –º—ã –±—Ä–∞—É–∑–µ—Ä –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    browser_created_here = False
    
    # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–¥ –≥–æ—Ä–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    from_code = from_city.upper() if len(from_city) == 3 else CITY_TO_IATA.get(from_city.lower(), from_city)
    to_code = to_city.upper() if len(to_city) == 3 else CITY_TO_IATA.get(to_city.lower(), to_city)
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç YYYYMMDD –¥–ª—è URL
    try:
        depart_date_obj = datetime.strptime(depart_date, '%d.%m.%Y')
        formatted_depart_date = depart_date_obj.strftime('%Y%m%d')
    except ValueError:
        if status_callback:
            await status_callback("‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥")
        return {"error": "Invalid date format"}, browser_created_here
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    service_class = CLASS_MAP.get(class_type.lower(), "economy")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
    adults_count = max(1, min(6, int(adults_count)))  # –æ—Ç 1 –¥–æ 6
    children_count = max(0, min(4, int(children_count)))  # –æ—Ç 0 –¥–æ 4
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞, —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
    url = f'https://www.aeroflot.ru/sb/app/ru-ru#/search?adults={adults_count}&children={children_count}&childrenaward={children_count}&award=Y&cabin={service_class}&infants=0'
    
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
    url += f'&routes={from_code}.{formatted_depart_date}.{to_code}'
    
    if status_callback:
        await status_callback(f"üîç –Ω–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤...\nüë• –ü–∞—Å—Å–∞–∂–∏—Ä—ã: {adults_count} –≤–∑—Ä., {children_count} –¥–µ—Ç.\nURL: {url}")
    
    # –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if driver is None or wait is None:
        browser_created_here = True
        try:
            driver, wait = await create_browser()
        except Exception as e:
            if status_callback:
                await status_callback(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä: {str(e)}")
            return {"error": f"Browser initialization failed: {str(e)}"}, browser_created_here
    
    results = {"there": []}  # –£–ø—Ä–æ—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    try:
        if status_callback:
            await status_callback("üåê –æ—Ç–∫—Ä—ã–≤–∞—é —Å–∞–π—Ç –∞—ç—Ä–æ—Ñ–ª–æ—Ç–∞...")
        
        driver.get(url)
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–π—Ç–∏"
        wait = WebDriverWait(driver, 5)
        try:
            if status_callback:
                await status_callback("üîç –Ω–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞...")
                
            find_button = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//a[contains(@class,'button') and contains(.,'–ù–∞–π—Ç–∏')]"))
            )
            find_button.click()
        except (NoSuchElementException, TimeoutException):
            if status_callback:
                await status_callback("‚ö†Ô∏è –∫–Ω–æ–ø–∫–∞ '–Ω–∞–π—Ç–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞")
            return {"error": "Search button not found"}, browser_created_here

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Ä–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –¥–æ–ª–≥–æ –≥—Ä—É–∑–∏—Ç—å—Å—è
            wait = WebDriverWait(driver, 15)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ—Ç —Ä–µ–π—Å–æ–≤
            no_flights_message = driver.find_elements(By.XPATH, 
                "//div[contains(@class,'text') and contains(@role,'alert') and contains(text(),'–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Ä–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')]")
            
            if no_flights_message:
                if status_callback:
                    await status_callback("‚ÑπÔ∏è –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Ä–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É, —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.")
                return {
                    "error": "no_flights_available",
                    "message": "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Ä–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    "suggestions": [
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
                        "–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
                        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {adults_count} –≤–∑—Ä., {children_count} –¥–µ—Ç.",
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
                    ]
                }, browser_created_here

            # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            try:
                if status_callback:
                    await status_callback("‚è≥ –æ–∂–∏–¥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞...")
                
                wait.until(
                    EC.presence_of_element_located((By.XPATH, "//div[contains(@class,'flight-search__inner')]"))
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                await asyncio.sleep(3)
            except TimeoutException:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑, –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–π—Å–æ–≤
                no_flights_message = driver.find_elements(By.XPATH, 
                    "//div[contains(@class,'text') and contains(@role,'alert') and contains(text(),'–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Ä–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')]")
                
                if no_flights_message:
                    if status_callback:
                        await status_callback("‚ÑπÔ∏è –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Ä–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É, —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.")
                    return {
                        "error": "no_flights_available",
                        "message": "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Ä–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        "suggestions": [
                            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
                            "–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
                            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {adults_count} –≤–∑—Ä., {children_count} –¥–µ—Ç.",
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
                        ]
                    }, browser_created_here
                        
                if status_callback:
                    await status_callback("‚ö†Ô∏è Timeout: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
                return {"error": "Search results timeout"}, browser_created_here
                
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            print(f"Error checking no flights message: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–∏–ø—É —Ä–µ–π—Å–∞
        if flight_filter != "all":
            if status_callback:
                await status_callback("üîç –ø—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ä–µ–π—Å–∞...")
            
            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
                wait.until(
                    EC.presence_of_element_located((By.XPATH, "//div[contains(@class,'filter__title')]"))
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç—å –∞–∫–∫–æ—Ä–¥–µ–æ–Ω —Å —ç–∫—Å–ø—Ä–µ—Å—Å-—Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                accordion_item = driver.find_elements(By.XPATH, "//div[@role='tab' and contains(@class,'accordion__item') and .//span[contains(text(),'–≠–∫—Å–ø—Ä–µ—Å—Å-—Ñ–∏–ª—å—Ç—Ä—ã')]]")
                if accordion_item:
                    if not "accordion__item--open" in accordion_item[0].get_attribute("class"):
                        # –ï—Å–ª–∏ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω –∑–∞–∫—Ä—ã—Ç, –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–º—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å
                        accordion_button = accordion_item[0].find_element(By.XPATH, ".//button[contains(@class,'accordion__heading')]")
                        driver.execute_script("arguments[0].click();", accordion_button)
                        await asyncio.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ "–ü—Ä—è–º–æ–π —Ä–µ–π—Å"
                direct_checkbox_labels = driver.find_elements(By.XPATH, "//label[contains(text(),'–ü—Ä—è–º–æ–π —Ä–µ–π—Å')]")
                if not direct_checkbox_labels and flight_filter == "direct":
                    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä "–ü—Ä—è–º–æ–π —Ä–µ–π—Å" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã
                    if status_callback:
                        await status_callback("‚ÑπÔ∏è –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –∑–∞ –º–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return {
                        "error": "no_direct_flights",
                        "message": "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –∑–∞ –º–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        "suggestions": [
                            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
                            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç '–í—Å–µ —Ä–µ–π—Å—ã', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–π—Å—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏",
                            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {adults_count} –≤–∑—Ä., {children_count} –¥–µ—Ç.",
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
                        ]
                    }, browser_created_here
                
                if flight_filter == "direct":
                    # –ù–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å "–ü—Ä—è–º–æ–π —Ä–µ–π—Å"
                    direct_checkbox_label = wait.until(
                        EC.presence_of_element_located((By.XPATH, "//label[contains(text(),'–ü—Ä—è–º–æ–π —Ä–µ–π—Å')]"))
                    )
                    direct_checkbox_id = direct_checkbox_label.get_attribute("for")
                    direct_checkbox = driver.find_element(By.ID, direct_checkbox_id)
                    
                    # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã
                    if not direct_checkbox.is_selected():
                        driver.execute_script("arguments[0].click();", direct_checkbox)
                        
                    # –ù–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å "1" (—Å –æ–¥–Ω–æ–π –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π), –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    connection_checkbox_labels = driver.find_elements(By.XPATH, "//label[text()='1']")
                    if connection_checkbox_labels:
                        connection_checkbox_label = connection_checkbox_labels[0]
                        connection_checkbox_id = connection_checkbox_label.get_attribute("for")
                        connection_checkbox = driver.find_element(By.ID, connection_checkbox_id)
                        
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–π—Å—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã
                        if connection_checkbox.is_selected():
                            driver.execute_script("arguments[0].click();", connection_checkbox)
                        
                elif flight_filter == "connections":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ "1" (—Å –æ–¥–Ω–æ–π –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π)
                    connection_checkbox_labels = driver.find_elements(By.XPATH, "//label[text()='1']")
                    if not connection_checkbox_labels:
                        if status_callback:
                            await status_callback("‚ÑπÔ∏è –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Ä–µ–π—Å—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏ –∑–∞ –º–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                        return {
                            "error": "no_connection_flights",
                            "message": "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Ä–µ–π—Å—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏ –∑–∞ –º–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                            "suggestions": [
                                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
                                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç '–í—Å–µ —Ä–µ–π—Å—ã', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã",
                                f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {adults_count} –≤–∑—Ä., {children_count} –¥–µ—Ç.",
                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
                            ]
                        }, browser_created_here
                    
                    # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–π—Å—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏
                    connection_checkbox_label = connection_checkbox_labels[0]
                    connection_checkbox_id = connection_checkbox_label.get_attribute("for")
                    connection_checkbox = driver.find_element(By.ID, connection_checkbox_id)
                    if not connection_checkbox.is_selected():
                        driver.execute_script("arguments[0].click();", connection_checkbox)
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –≤—ã–∫–ª—é—á–µ–Ω—ã, –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    direct_checkbox_labels = driver.find_elements(By.XPATH, "//label[contains(text(),'–ü—Ä—è–º–æ–π —Ä–µ–π—Å')]")
                    if direct_checkbox_labels:
                        direct_checkbox_label = direct_checkbox_labels[0]
                        direct_checkbox_id = direct_checkbox_label.get_attribute("for")
                        direct_checkbox = driver.find_element(By.ID, direct_checkbox_id)
                        if direct_checkbox.is_selected():
                            driver.execute_script("arguments[0].click();", direct_checkbox)
                
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
                await asyncio.sleep(2)
                
                if status_callback:
                    await status_callback("‚úÖ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ä–µ–π—Å–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω")
                    
            except (NoSuchElementException, TimeoutException) as e:
                if status_callback:
                    await status_callback(f"‚ö†Ô∏è –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ä–µ–π—Å–∞: {str(e)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        try:
            if status_callback:
                await status_callback("‚úÖ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
            
            # –Ω–∞–π–¥–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ)
            direction_frames = driver.find_elements(By.XPATH, "//div[contains(@class,'frame__heading') and contains(@class,'h-pull--left')]")
            
            # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—â–µ —Ä–∞–∑
            if not direction_frames:
                if status_callback:
                    await status_callback("‚ö†Ô∏è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—â–µ —Ä–∞–∑...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ—Ç —Ä–µ–π—Å–æ–≤
                no_flights_message = driver.find_elements(By.XPATH, 
                    "//div[contains(@class,'text') and @role='alert' and contains(text(),'–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã')]")
                
                if no_flights_message:
                    if status_callback:
                        await status_callback(f"‚ÑπÔ∏è {no_flights_message[0].text}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.")
                    return {
                        "error": "no_flights_available",
                        "message": no_flights_message[0].text,
                        "suggestions": [
                            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
                            "–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
                            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {adults_count} –≤–∑—Ä., {children_count} –¥–µ—Ç.",
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
                        ]
                    }, browser_created_here
                
                # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, —Ç–æ –Ω–µ—Ç –Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–π—Å–æ–≤
                if status_callback:
                    await status_callback("‚ö†Ô∏è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–æ–≤, –Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return {"error": "No directions found"}, browser_created_here
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            for idx, frame in enumerate(direction_frames):
                try:
                    direction_text = frame.text
                    direction_type = "there" if idx == 0 else "back"
                    
                    if status_callback:
                        await status_callback(f"üìä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–π—Å—ã {direction_text}...")
                    
                    # –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–π—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    parent_frame = frame.find_element(By.XPATH, "./ancestor::div[contains(@class,'frame') and contains(@class,'flight-searchs')]")
                    cards = parent_frame.find_elements(By.XPATH, ".//div[contains(@class,'flight-search') and @tabindex='0']")
                    
                    if not cards:
                        if status_callback:
                            await status_callback(f"‚ÑπÔ∏è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction_text}")
                        results[direction_type] = []
                    else:
                        if status_callback:
                            await status_callback(f"‚úÖ –Ω–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–π—Å–æ–≤ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction_text}")
                            
                        for card_idx, card in enumerate(cards, 1):
                            try:
                                if status_callback:
                                    await status_callback(f"üé´ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–∏–ª–µ—Ç {card_idx}/{len(cards)} –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction_text}...")
                                
                                flight_data = extract_flight_data(card, card_idx, driver, wait)
                                results[direction_type].append(flight_data)
                                
                                if status_callback:
                                    await status_callback(f"‚úÖ –±–∏–ª–µ—Ç {card_idx}/{len(cards)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                            except Exception as e:
                                if status_callback:
                                    await status_callback(f"‚ö†Ô∏è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–ª–µ—Ç–∞ {card_idx}: {str(e)}")
                        
                        if status_callback:
                            await status_callback(f"‚úÖ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results[direction_type])} —Ä–µ–π—Å–æ–≤ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction_text}")
                
                except Exception as e:
                    if status_callback:
                        await status_callback(f"‚ö†Ô∏è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {idx}: {str(e)}")
            
            if status_callback:
                await status_callback("‚úÖ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            return results, browser_created_here
            
        except Exception as e:
            if status_callback:
                await status_callback(f"‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
            return {"error": f"Results processing error: {str(e)}"}, browser_created_here

    except Exception as e:
        if status_callback:
            await status_callback(f"‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        return {"error": str(e)}, browser_created_here
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –µ–≥–æ —Å–æ–∑–¥–∞–ª–∏ –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if browser_created_here and driver:
            driver.quit()


async def search_roundtrip(
    from_city, 
    to_city, 
    depart_date, 
    return_date,  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    adults_count=1,
    children_count=0,
    class_type="economy", 
    flight_filter="all",
    status_callback=None
):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤ —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    
    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    """
    combined_results = {"there": [], "back": []}
    driver = None
    wait = None
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        driver, wait = await create_browser()
        
        # 2. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ç—É–¥–∞
        if status_callback:
            await status_callback("üîé –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –¢–£–î–ê...")
        
        there_results, _ = await search_flights(
            from_city=from_city,
            to_city=to_city,
            depart_date=depart_date,
            adults_count=adults_count,
            children_count=children_count,
            class_type=class_type,
            flight_filter=flight_filter,
            status_callback=status_callback,
            driver=driver,
            wait=wait
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ —Ç—É–¥–∞
        if "error" in there_results:
            return there_results  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ —Ç—É–¥–∞ –Ω–µ —É–¥–∞–ª—Å—è
        
        combined_results["there"] = there_results.get("there", [])
        
        # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ
        if status_callback:
            await status_callback("üîé –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –û–ë–†–ê–¢–ù–û...")
        
        back_results, _ = await search_flights(
            from_city=to_city,  # –ú–µ–Ω—è–µ–º –≥–æ—Ä–æ–¥–∞ –º–µ—Å—Ç–∞–º–∏
            to_city=from_city,
            depart_date=return_date,
            adults_count=adults_count,
            children_count=children_count,
            class_type=class_type,
            flight_filter=flight_filter,
            status_callback=status_callback,
            driver=driver,
            wait=wait
        )
        
        if "error" not in back_results:
            combined_results["back"] = back_results.get("there", [])
        
        return combined_results
    
    except Exception as e:
        if status_callback:
            await status_callback(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return {"error": str(e)}
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if driver:
            driver.quit()


def extract_flight_data(card, card_idx, driver, wait):
    """
    –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.
    
    Args:
        card: —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–π—Å–∞
        card_idx: –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏
        driver: —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver
        wait: —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriverWait
        
    Returns:
        dict: –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–µ
    """
    try:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ–π—Å–∞ #{card_idx}")
        
        # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ—Å–∞–¥–∫–∏
        has_transfer = False
        transfer_time = None
        try:
            transfer_element = card.find_element(By.XPATH, ".//span[contains(text(),'–ø–µ—Ä–µ—Å–∞–¥–∫–∞')]")
            has_transfer = True
            transfer_time = transfer_element.text.replace("–ø–µ—Ä–µ—Å–∞–¥–∫–∞", "").strip()
        except Exception:
            pass
        
        # –¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ—Å–∞–¥–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª–µ—Ç–∞
        segments = card.find_elements(By.XPATH, ".//div[contains(@class,'flight-search__flights') and @role='row']")
        valid_segments_count = 0
        for seg in segments:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –æ –ø–µ—Ä–µ—Å–∞–¥–∫–µ –∏–ª–∏ –¥–∞—Ç–µ
            if seg.find_elements(By.XPATH, ".//div[contains(@class,'flight-search__transfer')]"):
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ª–µ—Ç–µ/–ø—Ä–∏–ª–µ—Ç–µ
            time_destination = seg.find_elements(By.XPATH, ".//div[contains(@class,'time-destination__row')]")
            if time_destination:
                valid_segments_count += 1
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –ø–µ—Ä–µ—Å–∞–¥–∫–∏
        if valid_segments_count > 1:
            has_transfer = True
            if transfer_time is None:
                transfer_time = f"{valid_segments_count - 1} –ø–µ—Ä–µ—Å–∞–¥–∫–∞(–∏)"

        # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
        seats_left_val = "‚Äî"
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º flight-search__left –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
            seats_elements = card.find_elements(By.XPATH, ".//div[contains(@class,'flight-search__left')]")
            if seats_elements:
                for element in seats_elements:
                    seats_text = element.text
                    if "–¥–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç" in seats_text.lower():
                        seats_left_val = extract_seats_text(seats_text)
                        break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç: {e}")
        
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª–µ—Ç–∞
        valid_segments = []
        
        for seg in segments:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –æ –ø–µ—Ä–µ—Å–∞–¥–∫–µ –∏–ª–∏ –¥–∞—Ç–µ
            if seg.find_elements(By.XPATH, ".//div[contains(@class,'flight-search__transfer')]"):
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ª–µ—Ç–µ/–ø—Ä–∏–ª–µ—Ç–µ
            time_destination = seg.find_elements(By.XPATH, ".//div[contains(@class,'time-destination__row')]")
            if not time_destination:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ
            
            # –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞/–ø—Ä–∏–ª–µ—Ç–∞
            depart_city = safe_find_text(seg, ".//span[contains(@class,'helptext--left')]")
            arrive_city = safe_find_text(seg, ".//span[contains(@class,'helptext--right')]")
            
            # –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞
            dep_time = safe_find_text(seg, ".//div[contains(@class,'time-destination__from')]//span[contains(@class,'time-destination__time')]")
            
            # –≤—Ä–µ–º—è –ø—Ä–∏–ª–µ—Ç–∞
            try:
                arr_block = seg.find_element(By.XPATH, ".//div[contains(@class,'time-destination__to')]/div[contains(@class,'time-destination__time')]")
                arr_time = arr_block.find_element(By.XPATH, ".//span").text
                try:
                    plus_day = arr_block.find_element(By.XPATH, ".//span[contains(@class,'time-destination__plusday')]").text
                    arr_time = f"{arr_time} {plus_day}"
                except Exception:
                    pass
            except Exception:
                arr_time = "‚Äî"

            # IATA
            try:
                iata_from = seg.find_element(By.XPATH, ".//div[contains(@class,'time-destination__from')]/span[contains(@class,'time-destination__airport')]").text
            except Exception:
                iata_from = "‚Äî"
            try:
                iata_to = seg.find_element(By.XPATH, ".//div[contains(@class,'time-destination__to')]/span[contains(@class,'time-destination__airport')]").text
            except Exception:
                iata_to = "‚Äî"
            
            # –∫–æ–º–ø–∞–Ω–∏—è –∏ –Ω–æ–º–µ—Ä, –º–æ–¥–µ–ª—å
            airline = safe_find_text(seg, ".//div[contains(@class,'flight-search__company-name')]")
            flight_number = safe_find_text(seg, ".//div[contains(@class,'flight-search__plane-number') and not(contains(@class,'hide--above-desktop'))]")
            if flight_number == "‚Äî":
                # –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                flight_number = safe_find_text(seg, ".//div[contains(@class,'flight-search__plane-number')]")
            
            plane_model = safe_find_text(seg, ".//div[contains(@class,'flight-search__plane-model')]")

            valid_segments.append({
                "depart_city": depart_city,
                "arrive_city": arrive_city,
                "dep_time": dep_time,
                "arr_time": arr_time,
                "iata_from": iata_from,
                "iata_to": iata_to,
                "airline": airline,
                "flight_number": flight_number,
                "plane_model": plane_model
            })

        # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        miles_cost = "‚Äî"
        rubles_cost = "‚Äî"
        
        try:
            # –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–≤—ã–±—Ä–∞—Ç—å —Ä–µ–π—Å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            choose_button = card.find_element(By.XPATH, ".//button[contains(@class,'button--outline')]")
            driver.execute_script("arguments[0].scrollIntoView(true);", choose_button)
            driver.execute_script("arguments[0].click();", choose_button)
            
            # –æ–∂–∏–¥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
            time.sleep(2)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
            try:
                # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ "—Å—Ç–∞–Ω–¥–∞—Ä—Ç"
                miles_cost, rubles_cost = get_tariff_info(driver, wait)
            except Exception as tariff_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞—Ä–∏—Ñ–µ: {tariff_error}")
                miles_cost, rubles_cost = "‚Äî", "‚Äî"
            
            # –æ–∂–∏–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            time.sleep(1)
            
        except (NoSuchElementException, ElementClickInterceptedException) as e:
            print(f"–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ: {e}")
        
        # —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        flight_data = {
            "id": card_idx,
            "seats_available": seats_left_val,
            "has_transfer": has_transfer,
            "transfer_time": transfer_time if has_transfer else None,
            "segments": valid_segments,
            "miles_cost": miles_cost,
            "rubles_cost": rubles_cost
        }
        
        print(f"–ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–µ–π—Å–∞ #{card_idx} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return flight_data
        
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–µ: {e}")
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–º–µ—Å—Ç–æ None
        return {
            "id": card_idx,
            "error": str(e),
            "segments": [],
            "seats_available": "‚Äî",
            "has_transfer": False,
            "miles_cost": "‚Äî",
            "rubles_cost": "‚Äî"
        }
        
def get_tariff_info(driver, wait):
    """
    –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ "—Å—Ç–∞–Ω–¥–∞—Ä—Ç" –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.
    
    Args:
        driver: —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver
        wait: —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriverWait
        
    Returns:
        tuple: (—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–∏–ª—è—Ö, —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö)
    """
    try:
        # –æ–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
        wait.until(EC.presence_of_element_located((By.XPATH, "//div[contains(@class,'tariff__table-price')]")))
        
        # –Ω–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ "—Å—Ç–∞–Ω–¥–∞—Ä—Ç" (–≤—Ç–æ—Ä–æ–π –±–ª–æ–∫ —Ü–µ–Ω)
        standard_tariff = driver.find_elements(By.XPATH, "//div[contains(@class,'tariff__table-cell') and contains(@class,'tariff__table-price')]")[1]
        
        miles_text = ""
        rubles_text = ""
        
        # –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–∏–ª—è—Ö
        miles_element = standard_tariff.find_element(By.XPATH, ".//div")
        miles_text = miles_element.text.replace("–æ—Ç", "").replace("¬•", "").strip()
        miles_match = re.search(r'(\d+\s*\d*)', miles_text)
        if miles_match:
            miles_text = miles_match.group(1).replace(" ", "")
        
        # –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
        rubles_element = standard_tariff.find_element(By.XPATH, ".//p[contains(@class,'text--compact')]")
        rubles_text = rubles_element.text
        rubles_match = re.search(r'–∏\s*(\d+\s*\d*)', rubles_text)
        if rubles_match:
            rubles_text = rubles_match.group(1).replace(" ", "")
        
        # –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫ –∏–ª–∏ –∑–∞–¥–Ω—é—é –∫–Ω–æ–ø–∫—É
        try:
            close_button = driver.find_element(By.XPATH, "//button[contains(@class,'modal__close')]")
            close_button.click()
        except:
            try:
                back_button = driver.find_element(By.XPATH, "//button[contains(@class,'button--back')]")
                back_button.click()
            except:
                # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å, –Ω–∞–∂–∏–º–∞–µ–º Escape
                from selenium.webdriver.common.keys import Keys
                webdriver.ActionChains(driver).send_keys(Keys.ESCAPE).perform()
        
        return miles_text, rubles_text
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞—Ä–∏—Ñ–µ: {e}")
        return "‚Äî", "‚Äî"

def extract_seats_text(text):
    """–∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –°–¥–µ–ª–∞–µ–º –ø–æ–∏—Å–∫ –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä—ã
    text = text.lower()
    match = re.search(r'–¥–æ—Å—Ç—É–ø–Ω–æ\s+–º–µ—Å—Ç\s+–ø–æ\s+—Ç–µ–∫—É—â–µ–π\s+—Ü–µ–Ω–µ:\s*(\d+)', text)
    if match:
        return match.group(1)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞
    match = re.search(r'–¥–æ—Å—Ç—É–ø–Ω–æ\s+(\d+)\s+–º–µ—Å—Ç', text)
    if match:
        return match.group(1)
    
    # –ü—Ä–æ—Å—Ç–æ –Ω–∞–π–¥–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    match = re.search(r':\s*(\d+)', text)
    if match:
        return match.group(1)
    
    return "‚Äî"

def safe_find_text(el, xpath):
    """–±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞"""
    try:
        return el.find_element(By.XPATH, xpath).text
    except Exception:
        return "‚Äî"