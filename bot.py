# bot.py - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
import logging
import os
import asyncio
from flight_searcher import search_flights
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv



# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class FlightSearch(StatesGroup):
    waiting_for_from = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    waiting_for_to = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–±—ã—Ç–∏—è
    waiting_for_depart_date = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞ —Ç—É–¥–∞
    asking_return_flight = State()  # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–π —Ä–µ–π—Å
    waiting_for_return_date = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è
    waiting_for_class = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
    waiting_for_flight_type = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Å–∞ (–ø—Ä—è–º–æ–π/—Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ –ê—ç—Ä–æ—Ñ–ª–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –ê—ç—Ä–æ—Ñ–ª–æ—Ç–∞. –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/search - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search
@dp.message(Command("search"))
async def cmd_search(message: types.Message, state: FSMContext):
    await state.set_state(FlightSearch.waiting_for_from)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞ –∏–ª–∏ MOW):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.message(FlightSearch.waiting_for_from)
async def process_from(message: types.Message, state: FSMContext):
    await state.update_data(from_city=message.text)
    await state.set_state(FlightSearch.waiting_for_to)
    await message.answer(f"–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {message.text}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–±—ã—Ç–∏—è
@dp.message(FlightSearch.waiting_for_to)
async def process_to(message: types.Message, state: FSMContext):
    await state.update_data(to_city=message.text)
    await state.set_state(FlightSearch.waiting_for_depart_date)
    await message.answer(f"–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: {message.text}\n–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ —Ç—É–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞
@dp.message(FlightSearch.waiting_for_depart_date)
async def process_depart_date(message: types.Message, state: FSMContext):
    await state.update_data(depart_date=message.text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞, –Ω—É–∂–µ–Ω –ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–π —Ä–µ–π—Å
    markup = types.ReplyKeyboardMarkup(keyboard=[
        [types.KeyboardButton(text="–î–∞")], 
        [types.KeyboardButton(text="–ù–µ—Ç")]
    ], resize_keyboard=True)
    
    await state.set_state(FlightSearch.asking_return_flight)
    await message.answer(f"–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {message.text}\n–ù—É–∂–µ–Ω –ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–π —Ä–µ–π—Å?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞
@dp.message(FlightSearch.asking_return_flight)
async def process_return_flight(message: types.Message, state: FSMContext):
    user_response = message.text.lower()
    
    if user_response == "–¥–∞":
        await state.set_state(FlightSearch.waiting_for_return_date)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    else:
        # –ï—Å–ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–π —Ä–µ–π—Å –Ω–µ –Ω—É–∂–µ–Ω, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∞
        await state.update_data(return_date=None)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
        markup = types.ReplyKeyboardMarkup(keyboard=[
            [types.KeyboardButton(text="–≠–∫–æ–Ω–æ–º")], 
            [types.KeyboardButton(text="–ö–æ–º—Ñ–æ—Ä—Ç")], 
            [types.KeyboardButton(text="–ë–∏–∑–Ω–µ—Å")]
        ], resize_keyboard=True)
        
        await state.set_state(FlightSearch.waiting_for_class)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è
@dp.message(FlightSearch.waiting_for_return_date)
async def process_return_date(message: types.Message, state: FSMContext):
    await state.update_data(return_date=message.text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
    markup = types.ReplyKeyboardMarkup(keyboard=[
        [types.KeyboardButton(text="–≠–∫–æ–Ω–æ–º")], 
        [types.KeyboardButton(text="–ö–æ–º—Ñ–æ—Ä—Ç")], 
        [types.KeyboardButton(text="–ë–∏–∑–Ω–µ—Å")]
    ], resize_keyboard=True)
    
    await state.set_state(FlightSearch.waiting_for_class)
    await message.answer(f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è: {message.text}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
@dp.message(FlightSearch.waiting_for_class)
async def process_class(message: types.Message, state: FSMContext):
    await state.update_data(class_type=message.text.lower())
    
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Å–∞
    markup = types.ReplyKeyboardMarkup(keyboard=[
        [types.KeyboardButton(text="–¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã")],
        [types.KeyboardButton(text="–í—Å–µ —Ä–µ–π—Å—ã")],
        [types.KeyboardButton(text="–¢–æ–ª—å–∫–æ —Ä–µ–π—Å—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏")]
    ], resize_keyboard=True)
    
    await state.set_state(FlightSearch.waiting_for_flight_type)
    await message.answer("–ö–∞–∫–∏–µ —Ä–µ–π—Å—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?", reply_markup=markup)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Å–∞
@dp.message(FlightSearch.waiting_for_flight_type)
async def process_flight_type(message: types.Message, state: FSMContext):
    flight_type = message.text
    
        # –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    flight_filter = "all"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ —Ä–µ–π—Å—ã
    if flight_type == "–¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã":
        flight_filter = "direct"
    elif flight_type == "–¢–æ–ª—å–∫–æ —Ä–µ–π—Å—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏":
        flight_filter = "connections"
    
    await state.update_data(flight_filter=flight_filter)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardRemove()
      
    search_params = (
        f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n"
        f"‚úàÔ∏è –û—Ç–∫—É–¥–∞: {user_data['from_city']}\n"
        f"üõ¨ –ö—É–¥–∞: {user_data['to_city']}\n"
        f"üìÖ –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {user_data['depart_date']}\n"
    )
    
    if user_data.get('return_date'):
        search_params += f"üîÑ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è: {user_data['return_date']}\n"
    else:
        search_params += "üîÑ –ë–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞\n"
        
    search_params += f"üõã –ö–ª–∞—Å—Å: {user_data.get('class_type', '‚Äî')}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Ä–µ–π—Å–∞
    filter_text = "–í—Å–µ —Ç–∏–ø—ã —Ä–µ–π—Å–æ–≤"
    if user_data.get('flight_filter') == "direct":
        filter_text = "–¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã"
    elif user_data.get('flight_filter') == "connections":
        filter_text = "–¢–æ–ª—å–∫–æ —Ä–µ–π—Å—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏"
    
    search_params += f"üõ´ –¢–∏–ø —Ä–µ–π—Å–∞: {filter_text}"
    
    search_message = await message.answer(search_params, reply_markup=markup)
    status_message = await message.answer("üïí –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status_info = [status_message]
    
    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def update_status(text):
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await status_info[0].edit_text(text)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            status_info[0] = await message.answer(text)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤
    search_result = await search_flights(
        from_city=user_data['from_city'],
        to_city=user_data['to_city'],
        depart_date=user_data['depart_date'],
        return_date=user_data.get('return_date'),
        class_type=user_data.get('class_type', '—ç–∫–æ–Ω–æ–º'),
        flight_filter=user_data.get('flight_filter', 'all'),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        status_callback=update_status
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if "error" in search_result:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {search_result['error']}")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    there_flights = search_result.get("there", [])
    back_flights = search_result.get("back", [])
    
    if not there_flights and not back_flights:
        await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
        return
            
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–∞—Ö
    if there_flights:
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(there_flights)} —Ä–µ–π—Å–æ–≤ —Ç—É–¥–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ä–µ–π—Å–µ —Ç—É–¥–∞
        for flight in there_flights:
            flight_info = format_flight_info(flight, "—Ç—É–¥–∞")
            await message.answer(flight_info, parse_mode="HTML")
    
    if back_flights:
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(back_flights)} —Ä–µ–π—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ä–µ–π—Å–µ –æ–±—Ä–∞—Ç–Ω–æ
        for flight in back_flights:
            flight_info = format_flight_info(flight, "–æ–±—Ä–∞—Ç–Ω–æ")
            await message.answer(flight_info, parse_mode="HTML")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
    await message.answer("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.")

def format_flight_info(flight, direction):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    Args:
        flight: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–µ
        direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ç—É–¥–∞/–æ–±—Ä–∞—Ç–Ω–æ)
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ
    """
    if flight is None:
        return f"<b>–†–µ–π—Å {direction}</b>\n–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
    if "error" in flight:
        return f"<b>–†–µ–π—Å {direction} #{flight.get('id', '')}</b>\n–û—à–∏–±–∫–∞: {flight.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    segments = flight.get("segments", [])
    if not segments:
        return f"<b>–†–µ–π—Å {direction} #{flight.get('id', '')}</b>\n–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–µ—Å—Ç
    seats_info = f"–î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {flight.get('seats_available', '‚Äî')}"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ (–æ—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞, –≤—Ä–µ–º—è)
    first_segment = segments[0]
    last_segment = segments[-1]
    
    route_info = (
        f"<b>–†–µ–π—Å {direction} #{flight.get('id', '')}</b>\n"
        f"<b>{first_segment.get('depart_city', '‚Äî')} ({first_segment.get('iata_from', '‚Äî')}) ‚Üí "
        f"{last_segment.get('arrive_city', '‚Äî')} ({last_segment.get('iata_to', '‚Äî')})</b>\n"
        f"–í—ã–ª–µ—Ç: {first_segment.get('dep_time', '‚Äî')}, –ü—Ä–∏–ª–µ—Ç: {last_segment.get('arr_time', '‚Äî')}\n"
        f"{seats_info}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    miles_cost = flight.get('miles_cost', '‚Äî')
    rubles_cost = flight.get('rubles_cost', '‚Äî')
    
    if miles_cost != '‚Äî' and rubles_cost != '‚Äî':
        cost_info = f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ—É –°—Ç–∞–Ω–¥–∞—Ä—Ç:</b> {miles_cost} –º–∏–ª—å + {rubles_cost} —Ä—É–±."
    else:
        cost_info = "\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    route_info += cost_info
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å–∞–¥–∫–∞—Ö
    if flight.get("has_transfer"):
        route_info += f"\n<b>–ü–µ—Ä–µ—Å–∞–¥–∫–∞: {flight.get('transfer_time', '‚Äî')}</b>"
    else:
        route_info += "\n<b>–ü—Ä—è–º–æ–π —Ä–µ–π—Å</b>"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
    if len(segments) > 1:
        route_info += "\n\n<u>–°–µ–≥–º–µ–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞:</u>"
        for i, segment in enumerate(segments, 1):
            route_info += (
                f"\n{i}. {segment.get('depart_city', '‚Äî')} ({segment.get('iata_from', '‚Äî')}) ‚Üí "
                f"{segment.get('arrive_city', '‚Äî')} ({segment.get('iata_to', '‚Äî')})"
                f"\n   {segment.get('airline', '‚Äî')}, {segment.get('flight_number', '‚Äî')}, {segment.get('plane_model', '‚Äî')}"
                f"\n   –í—ã–ª–µ—Ç: {segment.get('dep_time', '‚Äî')}, –ü—Ä–∏–ª–µ—Ç: {segment.get('arr_time', '‚Äî')}"
            )
    else:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ
        segment = segments[0]
        route_info += (
            f"\n<b>{segment.get('airline', '‚Äî')}</b>, {segment.get('flight_number', '‚Äî')}, {segment.get('plane_model', '‚Äî')}"
        )
    
    return route_info

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
